import type { Options, ContainerOffset, Coords, OnChange, ScrollRange } from './type';
import { WriteModel, BGPattern, ScrollDirection, ShapeType } from './enum';
export { WriteModel, BGPattern, ScrollDirection, ShapeType };
export default class Board {
    container: HTMLDivElement;
    private width;
    private height;
    private worldOffsetX;
    private worldOffsetY;
    private scrolling;
    private cleanState;
    private cleanX?;
    private cleanY?;
    private cleanPress;
    private stackObj;
    private moveT;
    private debounceBindOnChange;
    private toolShape;
    private activateToolShape;
    private background;
    private ruleAuxiliary;
    private border;
    private writing;
    private eraser;
    private eraserHasContent;
    private brushDrawing;
    scrollRange: ScrollRange;
    scrollDirection: ScrollDirection;
    bgPattern: BGPattern;
    writeModel: WriteModel;
    enableBG: boolean;
    gridGap: number;
    gridPaperGap: number;
    quadrillePaperVerticalMargin: number;
    quadrillePaperGap: number;
    gridFillStyle: string;
    gridPaperStrokeStyle: string;
    quadrillePaperStrokeStyles: string[];
    rule: boolean;
    ruleGap: number;
    ruleUnitLen: number;
    ruleStrokeStyle: string;
    voice: number;
    color: string;
    cleanWidth: number;
    cleanHeight: number;
    stack: boolean;
    moveCountTotal: number;
    writeLocked: boolean;
    dragLocked: boolean;
    showBorder: boolean;
    borderStyle: string;
    borderWidth: number;
    useShapeType: boolean;
    containerOffset: ContainerOffset;
    onChange: OnChange | undefined;
    constructor(container: HTMLDivElement, options?: Options);
    setVoice(voice?: number): void;
    showBG(): void;
    hideBG(): void;
    showRule(): void;
    hideRule(): void;
    showToolShape(): void;
    hideToolShape(): void;
    setToolShapeType(shapeType: ShapeType): void;
    private adjustOffset;
    private doMove;
    scrollBy(x?: number, y?: number): void;
    clear(): void;
    triggerOnChange(): void;
    exportAsCanvas(): HTMLCanvasElement;
    exportAsPaperCanvas(): HTMLCanvasElement;
    undo(): void;
    redo(): void;
    clean(): void;
    unclean(): void;
    draw(): void;
    private doPushPoints;
    private loadEvent;
    getPageCoords: (touches: TouchList | Coords[]) => {
        pageX: number;
        pageY: number;
    };
    private drawEraser;
    private doClean;
    private loadBackground;
    private loadRule;
    private drawToolShape;
}
export { Board };

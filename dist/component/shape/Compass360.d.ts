import type { GetPageCoords } from '../../type';
import type ToolShape from '../ToolShape';
export default class Compass {
    ctx: CanvasRenderingContext2D;
    cm: number;
    mm: number;
    container: HTMLDivElement;
    getPageCoords: GetPageCoords;
    toolShape: ToolShape;
    path: Path2D;
    outsideR: number;
    insideR: number;
    pointerW: number;
    startAngle: number;
    endAngle: number;
    firstPointerAngle: number;
    secondPointerAngle: number;
    pointer1: Path2D;
    pointer2: Path2D;
    cx: number;
    cy: number;
    angle: number;
    constructor(ctx: CanvasRenderingContext2D, cm: number, mm: number, container: HTMLDivElement, getPageCoords: GetPageCoords, toolShape: ToolShape);
    calculateRotationAngle(cx: number, cy: number, dragStartX: number, dragStartY: number, dragEndX: number, dragEndY: number): number;
    private loadEvent;
    getOutlineCtx(_x: number, _y: number, _angle: number, outlineVoice: number, strokeStyle: string): OffscreenCanvasRenderingContext2D;
    generatorOuterBorder(_cx: number, _cy: number, _angle: number): Path2D;
    generatorPointer(_cx: number, _cy: number, _angle: number, pointerAngle: number, outlineVoice: number): Path2D;
    drawDegree(cx: number, cy: number, r: number, smallUnitL: number, unitL: number, bigUnitL: number, ruleFontSize: number, fontGap: number, showText: boolean, showSmall: boolean, showMiddle: boolean, showBig: boolean, textOnInner: boolean, _angle: number, reverse: boolean): void;
    drawContent(_cx: number, _cy: number, _angle: number): void;
    drawBorder(ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D, cx: number, cy: number, angle: number, outlineVoice: number, strokeStyle: string): void;
    drawPointer(ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D, cx: number, cy: number, angle: number, pointerAngle: number, outlineVoice: number, fillStyle: string): Path2D;
    drawFixedPoint(cx: number, cy: number, angle: number): void;
    draw(cx: number, cy: number, angle: number): void;
    isPointInPath(x: number, y: number, fillRule: CanvasFillRule): boolean;
}

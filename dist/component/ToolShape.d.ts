import { ShapeType } from '../enum';
import Ruler from './shape/Ruler';
import Compass from './shape/Compass';
import Compass360 from './shape/Compass360';
import Triangle from './shape/Triangle';
import type { GetPageCoords } from '../type';
export default class ToolShape {
    w: number;
    h: number;
    voice: number;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    getNearestDistanceAndPointVoice: number;
    outlineCtx: OffscreenCanvasRenderingContext2D;
    outlineImageData: ImageData;
    outline: [number, number, Uint8ClampedArray][] | null;
    outlineMap: Record<number, Record<number, Uint8ClampedArray>>;
    longestDistance: number;
    gatherAreaWidth: number;
    prevPoint: [number, number] | null;
    private _toolShapeType;
    private strokeStyle;
    cm: number;
    mm: number;
    width: number;
    height: number;
    marginH: number;
    degreeNumber: number;
    ruler: Ruler;
    compass: Compass;
    compass360: Compass360;
    rightAngleTriangle: Triangle;
    isoscelesTriangle: Triangle;
    constructor(w: number, h: number, voice: number, container: HTMLDivElement, getPageCoords: GetPageCoords);
    set toolShapeCenterX(x: number);
    get toolShapeCenterX(): number;
    set toolShapeCenterY(y: number);
    get toolShapeCenterY(): number;
    set angle(angle: number);
    get angle(): number;
    set toolShapeType(toolShapeType: ShapeType);
    get toolShapeType(): ShapeType;
    get shape(): Ruler | Compass | Compass360 | Triangle;
    reset(): void;
    getGathers(x1: number, y1: number, x2: number, y2: number, gatherAreaWidth: number): [number, number][];
    getNearestDistanceAndPoint(x: number, y: number, getNearestDistanceAndPointVoice: number, strokeStyle: string): {
        conformingToDistance: boolean;
        drawPoints: {
            x: number;
            y: number;
            fillStyle: string;
        }[];
    };
    getOutlineCtx(outlineVoice: number, strokeStyle: string): OffscreenCanvasRenderingContext2D;
    getOutline(imageData: ImageData): [number, number, Uint8ClampedArray][];
    getOutlineMap(outline: [number, number, Uint8ClampedArray][]): Record<number, Record<number, Uint8ClampedArray>>;
    isPointInPath(x: number, y: number, fillRule: CanvasFillRule): boolean;
    draw(): void;
}
